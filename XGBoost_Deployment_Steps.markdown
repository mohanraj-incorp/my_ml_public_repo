| Step | Techniques | GCP Components | YouTube Video |
|------|------------|----------------|---------------|
| **1. Data Ingestion** | - Extract data from diverse sources (e.g., CSV, SQL databases, APIs)<br>- Handle missing values (imputation)<br>- Validate data schema and types<br>- Use batch or streaming ingestion | - **Cloud Dataflow**: For ETL pipelines (batch/streaming)<br>- **Cloud Storage**: Store raw data (e.g., CSVs, JSON)<br>- **BigQuery**: Store structured data<br>- **Pub/Sub**: For streaming data | [**Data Ingestion with Google Cloud Dataflow (7:42)**](https://www.youtube.com/watch?v=0zszjW4L5n4)<br>Shows Dataflow pipeline creation for data ingestion. |
| **2. Data Preprocessing and Feature Engineering** | - Clean data (remove outliers, handle nulls)<br>- Feature scaling (StandardScaler for numerical features)<br>- Encode categorical variables (OneHotEncoder)<br>- Create new features (e.g., transaction frequency for XGBoost)<br>- Store preprocessed data for reuse | - **BigQuery**: Query and preprocess data<br>- **Dataproc**: Run Spark jobs for large-scale preprocessing<br>- **Cloud Storage**: Store preprocessed datasets<br>- **Cloud Composer (Airflow)**: Orchestrate preprocessing pipelines | [**Feature Engineering with BigQuery (9:15)**](https://www.youtube.com/watch?v=7Qz5Q6s8QvQ)<br>Demonstrates feature engineering in BigQuery. |
| **3. Feature Registration** | - Register features in a feature store for reuse<br>- Define feature metadata (e.g., type, range)<br>- Ensure version control for features<br>- Enable feature sharing across models | - **Vertex AI Feature Store**: Centralized feature management<br>- **BigQuery**: Store feature metadata<br>- **Cloud Storage**: Backup feature datasets | [**Vertex AI Feature Store Overview (6:30)**](https://www.youtube.com/watch?v=1j3QOkcL4zE)<br>Explains setting up a feature store in Vertex AI. |
| **4. Model Building** | - Train XGBoost model with cross-validation<br>- Optimize hyperparameters (e.g., learning rate, max depth)<br>- Handle imbalanced data (SMOTE, class weights)<br>- Evaluate with metrics (e.g., F1 Score, ROC-AUC) | - **Vertex AI Workbench (Jupyter Notebook)**: Develop and train models<br>- **BigQuery ML**: Train simple models<br>- **Dataproc**: Distributed training with Spark ML<br>- **Cloud Storage**: Save training artifacts | [**Training XGBoost on Vertex AI (10:22)**](https://www.youtube.com/watch?v=2YkV2Z5V85M)<br>Shows XGBoost training in Vertex AI Workbench. |
| **5. Model Registration** | - Save trained XGBoost model with version metadata<br>- Register model in a registry for deployment<br>- Include model performance metrics and lineage<br>- Ensure reproducibility with training configs | - **Vertex AI Model Registry**: Store and version models<br>- **Cloud Storage**: Save model artifacts (e.g., `.bst` files)<br>- **Artifact Registry**: Store model metadata | [**Vertex AI Model Registry (5:55)**](https://www.youtube.com/watch?v=3y8g8k0Z5eU)<br>Demonstrates registering models in Vertex AI. |
| **6. Model Deployment** | - Containerize XGBoost model (Docker)<br>- Deploy as a REST API endpoint<br>- Ensure scalability with load balancing<br>- Test endpoint with sample predictions | - **Vertex AI Endpoints**: Deploy model as API<br>- **Cloud Run**: Serverless deployment<br>- **Kubernetes Engine (GKE)**: Containerized deployment<br>- **Artifact Registry**: Store Docker images | [**Deploying Models on Vertex AI (8:40)**](https://www.youtube.com/watch?v=9h8zY5k7v8Q)<br>Shows deploying a model to Vertex AI endpoint. |
| **7. Model Monitoring** | - Track prediction accuracy (e.g., F1 Score, RMSE)<br>- Monitor latency and throughput<br>- Log predictions and errors<br>- Set alerts for performance degradation | - **Vertex AI Monitoring**: Track model metrics<br>- **Cloud Monitoring**: Dashboards and alerts<br>- **Cloud Logging**: Log predictions and errors<br>- **BigQuery**: Store monitoring data | [**Monitoring ML Models on GCP (7:10)**](https://www.youtube.com/watch?v=6k9tL5n2Y8M)<br>Explains setting up monitoring in Vertex AI. |
| **8. Data Drift Detection** | - Compare input data distributions (e.g., KS test, PSI)<br>- Monitor feature statistics over time<br>- Detect shifts in feature distributions<br>- Trigger alerts for significant drift | - **Vertex AI Monitoring**: Detect data drift<br>- **BigQuery**: Analyze feature distributions<br>- **Cloud Functions**: Automate drift detection scripts<br>- **Cloud Monitoring**: Alert on drift thresholds | [**Data Drift Detection on GCP (9:50)**](https://www.youtube.com/watch?v=4t9zL5n3Y7U)<br>Shows drift detection with Vertex AI. |
| **9. Model Retraining** | - Automate retraining pipelines with triggers<br>- Use new data to retrain XGBoost model<br>- Re-evaluate and update model in registry<br>- Deploy updated model with zero downtime | - **Cloud Composer (Airflow)**: Orchestrate retraining<br>- **Vertex AI Pipelines**: Automate training workflows<br>- **Cloud Storage**: Store new training data<br>- **Vertex AI Endpoints**: Update deployed model | [**Automating Model Retraining with Vertex AI (10:05)**](https://www.youtube.com/watch?v=8j7zL9n4Y2Q)<br>Demonstrates retraining pipelines in Vertex AI. |
| **10. Model Governance and Compliance** | - Ensure model explainability (e.g., SHAP values)<br>- Maintain audit trails for predictions<br>- Comply with regulations (e.g., GDPR)<br>- Document model lineage and versions | - **Vertex AI Explainability**: Generate SHAP values<br>- **BigQuery**: Store audit logs<br>- **Cloud IAM**: Manage access controls<br>- **Artifact Registry**: Track model lineage | [**Model Governance on GCP (6:25)**](https://www.youtube.com/watch?v=5k8zM3n7Y9T)<br>Explains governance and explainability in Vertex AI. |